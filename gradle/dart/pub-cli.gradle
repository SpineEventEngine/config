/*
 * Copyright 2019, TeamDev. All rights reserved.
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

import org.apache.tools.ant.taskdefs.condition.Os

/**
 * The script allowing to run `pub` commands from Gradle.
 */

/**
 * Executes the given command depending on the current OS.
 *
 * @param workingDirArg  the directory to execute the command in
 * @param windowsCommand the command to execute is the OS is Windows
 * @param unixCommand    the command to execute is the OS is Unix-like
 * @param params         the command params, platform-independent
 */
def execMultiplatform(final File workingDirArg,
                      final String windowsCommand,
                      final String unixCommand,
                      final String[] params) {
    exec {
        final String command = Os.isFamily(Os.FAMILY_WINDOWS) ? windowsCommand : unixCommand
        final List resultingParams = [command] + Arrays.asList(params)
        workingDir = workingDirArg
        commandLine = resultingParams
    }
}

def runPub(final File launchDir, final String[] params) {
    execMultiplatform launchDir, 'pub.cmd', 'pub', params
}

ext {

    /**
     * Executes a {@code pub} CLI command.
     *
     * For example, to execute command {@code pub run test ./test}, invoke this function as follows:
     * {@code executePub 'run', 'test', './test'}
     *
     * @param params the command parameters
     */
    executePub = { final File from = projectDir, final String... params ->
        runPub(from, params)
    }
}
